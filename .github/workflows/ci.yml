name: CI • Build • Test • Docker • Deploy

on:
  push:
    branches: [ main, dev, feature/** ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/cesizen-api

jobs:
  backend:
    name: Backend • Maven (Java 21 + Postgres)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: basecesizen
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mystere
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U myuser -d basecesizen"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Wait for Postgres
        run: |
          for i in {1..24}; do
            nc -z 127.0.0.1 5432 && echo "DB ready" && break
            echo "waiting db ($i/24)..." && sleep 5
          done

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Build & Test (profile test)
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./mvnw -B -DtrimStackTrace=false -DskipITs=false clean test --no-transfer-progress

      - name: Upload Surefire reports (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: |
            **/target/surefire-reports/**
            **/target/failsafe-reports/**
          if-no-files-found: ignore

      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: cesizen-api-jar
          path: target/*.jar
          if-no-files-found: warn

  frontend:
    name: Frontend • Lint • Test • Build
    runs-on: ubuntu-latest
    defaults:
      run:
        # change ici si ton front est dans un sous-dossier, ex. frontend/
        working-directory: .
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test --if-present

      - name: Build
        run: npm run build --if-present

      - name: Upload dist
        if: ${{ hashFiles('dist/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: cesizen-frontend-dist
          path: dist/

  docker:
    name: Docker • Build & Push (GHCR)
    runs-on: ubuntu-latest
    needs: [ backend ]     # ajoute "frontend" ici si l'image embarque le front
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (main/dev only)
        if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags + labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=ref,event=branch
            type=sha,format=short

      - name: Build (no push on feature/*)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Dockerfile: ./Dockerfile   # décommente si nécessaire

  deploy:
    name: Deploy • SSH + docker compose (main)
    if: github.ref == 'refs/heads/main'
    needs: [ docker ]
    runs-on: ubuntu-latest

    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          port:     ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            APP_DIR=/opt/cesizen
            REPO=${{ github.repository }}
            BRANCH=main
            
            docker --version
            docker compose version
            
            if [ ! -d "$APP_DIR/.git" ]; then
              sudo mkdir -p "$APP_DIR"
              sudo chown -R $USER:$USER "$APP_DIR"
              git clone https://github.com/${REPO}.git "$APP_DIR"
            fi
            
            cd "$APP_DIR"
            git fetch --all --prune
            git checkout "$BRANCH"
            git pull --ff-only origin "$BRANCH"
            
            # si tu utilises GHCR pour l'API :
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} || true
            
            docker compose down --remove-orphans || true
            docker compose pull || true
            docker compose up -d --build
            
            echo "=== Containers ==="
            docker compose ps
